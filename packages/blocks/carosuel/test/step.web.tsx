import { defineFeature, loadFeature} from "jest-cucumber"
import { shallow, ShallowWrapper } from 'enzyme'

import * as helpers from '../../../../framework/src/Helpers'
import {runEngine} from '../../../../framework/src/RunEngine'
import {Message} from "../../../../framework/src/Message"

import MessageEnum, {getName} from "../../../../framework/src/Messages/MessageEnum"; 
import React from "react";
import CarouselDisplay from "../../src/CarouselDisplay.web"
const navigation = require("react-navigation")

const screenProps = {
    navigation: navigation,
    id: "CarouselDisplay"
  }

const feature = loadFeature('./__tests__/features/CarouselDisplay-scenario.feature');

defineFeature(feature, (test) => {


    beforeEach(() => {
        jest.resetModules()
        jest.doMock('react-native', () => ({ Platform: { OS: 'web' }}))
        jest.spyOn(helpers, 'getOS').mockImplementation(() => 'web');
    });

    test('User navigates to CarouselDisplay', ({ given, when, then }) => {
        let carouselDisplayBlock:ShallowWrapper;
        let instance:CarouselDisplay; 

        given('I am a User loading CarouselDisplay', () => {
            carouselDisplayBlock = shallow(<CarouselDisplay {...screenProps}/>)
        });

        when('I navigate to the CarouselDisplay', () => {
             instance = carouselDisplayBlock.instance() as CarouselDisplay
        });

        then('CarouselDisplay will load with out errors', () => {
            const searchWrapper = carouselDisplayBlock.findWhere((node) => node.prop('data-test-id') == 'handleNext')
            searchWrapper.prop('next')()

            const searchWrapper1 = carouselDisplayBlock.findWhere((node) => node.prop('data-test-id') == 'handleNext')
            searchWrapper1.prop('prev')()
        });

        then('I can enter text with out errors', () => {
            instance = carouselDisplayBlock.instance() as CarouselDisplay;
            const responseFifth = new Message(
              getName(MessageEnum.RestAPIResponceMessage)
            );
            instance.carosuelDataApi = responseFifth.messageId;
            responseFifth.addData(
              getName(MessageEnum.RestAPIResponceDataMessage),
              responseFifth.messageId
            );
            responseFifth.addData(
              getName(MessageEnum.RestAPIResponceSuccessMessage),
              {
                    "data": [
                        {
                            "id": "1",
                            "type": "carousel",
                            "attributes": {
                                "title": "Qstock AI Policy and Account Disabling",
                                "subtitle": "Our marketplace policy does not currently allow content generated by AI to be directly uploaded and sold in our marketplace to protect contributors IP ownership of all content that is submitted. Submitting Ai work will lead to your account being disabled.",
                                "image": "https://qstockfullbrdincludingaicomponent-369205-ruby.b369205.dev.eastus.az.svc.builder.cafe/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBdmdGIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--6fa8e984476c190b20158fd8873a6507ffc796de/backimage_background.png"
                            }
                        }]}
            );
            runEngine.sendMessage("For unit test", responseFifth);
        });

        then('I can select the button with with out errors', () => {
            // let buttonComponent = carouselDisplay.findWhere((node) => node.prop('testID') === 'btnExample');
            // buttonComponent.simulate('press')
            // expect(carouselDisplay).toMatchSnapshot();
            // expect(instance.state.txtSavedValue).toEqual("hello@aol.com")
        });

        then('I can leave the screen with out errors', () => {
            instance.componentWillUnmount()
            expect(carouselDisplayBlock).toBeTruthy()
            // expect(carouselDisplay).toMatchSnapshot()
        });
    });


});
